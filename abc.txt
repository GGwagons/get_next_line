1. temp_buffer:  	"abcdefg\n123"
	1. read from file to storage
	2. stop if a \n was found
	3. return the buffer
2. newline: 		"abcdefg\n\0"
3. static buffer:  	"123\0"
4. return(newline)
5. repeated call
1. static buffer:	"12345678902\0" + "3456\n789\0"
2. newline:			"1234567890123456\n\0"
3. static buffer: 	"789\0"
4. return (newline)

1. 
char * temp_buffer;
char * new_string;
into	byte;

byte = 0;
while (strchr(temp_buffer, '\n') == NULL)
{
	new_string = (char *)malloc(sizeof(char) * (BUFFER_SIZE + 1))
	byte = read(fd, new_string, BUFFER_SIZE);
	if (byte == -1)
		return;
	temp_buffer = strjoin(temp_buffer, new_string);
}
free(string);
return (temp_buffer);

-------
1. 1.
char *absolute_new

int total_strlen = strlen(temp_buffer) + strlen(new_string);
absolute_new = malloc (total-total_strlen)....
strcpy(absolute_new, temp_buffer);
strcpy(absolute_new, new_string);
return (absolute_new);

--------
2. 
int i = 0;
char *ouput;

while (temp_buffer != '\n)
	i++;
if (temp_buffer == '\n)
	i++;
output = malloc (sizeof(char) * (i + 1));
int j = 0;
while (j <= i)
	output[j] = temp_buffer[j];
	j++;
output[j] = '\0';
return (output);

--------
int 	length;
char 	*rest;

find a way to calculate length
rest = malloc (sizeof(char) * (ft_strlen(ft_strchr(line_buffer, '\n'))));
i = 0;
start = strlen(strchar(line_buffer, '\n));
while (line_buffer != '\0)
{
	rest[i] = line_buffer[start + i];
	i++;
}
rest[i] = '\0';
free(line_buffer);
return (rest);

"123456789"
int i = 0;
while (new_string[i] != '\0)
	i++;
